[app:app]
use = egg:encoded
cnf_name = main_app
annotations_path = ${annotations_path}
aws_ip_ranges_path = ${aws_ip_ranges_path}
download_proxy = https://download.encodeproject.org/
elasticsearch.server = ${elasticsearch.server}
file_upload_bucket = encoded-files-dev
file_upload_profile_name = ${file_upload_profile_name}
ontology_path = ${ontology_path}

auth0.siteName = ENCODE DCC Submission
postgresql.statement_timeout = 120
pyramid.default_locale_name = en
sqlalchemy.url = ${postgres_uri}
tm.attempts = 3

# Only run ec2metadata on ec2 instances
# XXX really need to reorganise ini files for more reuse
hostname_command = command -v ec2metadata > /dev/null && ec2metadata --public-hostname || hostname

multiauth.policies = auth0 session remoteuser accesskey
multiauth.groupfinder = encoded.authorization.groupfinder
multiauth.policy.auth0.use = encoded.authentication.NamespacedAuthenticationPolicy
multiauth.policy.auth0.base = encoded.auth0.Auth0AuthenticationPolicy
multiauth.policy.auth0.namespace = auth0
multiauth.policy.session.use = encoded.authentication.NamespacedAuthenticationPolicy
multiauth.policy.session.base = pyramid.authentication.SessionAuthenticationPolicy
multiauth.policy.session.namespace = mailto
multiauth.policy.remoteuser.use = encoded.authentication.NamespacedAuthenticationPolicy
multiauth.policy.remoteuser.namespace = remoteuser
multiauth.policy.remoteuser.base = pyramid.authentication.RemoteUserAuthenticationPolicy
multiauth.policy.accesskey.use = encoded.authentication.NamespacedAuthenticationPolicy
multiauth.policy.accesskey.namespace = accesskey
multiauth.policy.accesskey.base = encoded.authentication.BasicAuthAuthenticationPolicy
multiauth.policy.accesskey.check = encoded.authentication.basic_auth_check
# Direct file transfer from external AWS S3 to internal S3 bucket
external_aws_s3_transfer_allow = ${external_aws_s3_transfer_allow}
external_aws_s3_transfer_buckets = ${external_aws_s3_transfer_buckets}

embed_cache.capacity = 5000

[composite:indexer]
use = egg:encoded#indexer
app = app
path = /index
timeout = 60
set stage_for_followup = vis_indexer, region_indexer
set embed_cache.capacity = 5000
set conf_name = indexer_server
set is_index_server = true
set index_queue_type = ${queue_type}
set index_worker_procs = ${index_srv_procs}
set index_do_log = ${index_srv_do_log}
set index_queue_name = ${queue_name}
set index_worker_chunk_size = ${chunk_size}
set redis_ip = ${redis_ip}
set redis_port = ${redis_port}

[composite:index_worker]
use = egg:encoded#indexer
app = app
path = /index_worker
timeout = 10
set cnf_name = indexer_worker
set embed_cache.capacity = 5000
set is_index_server = false
set index_queue_type = ${queue_type}
set index_worker_procs = ${index_wrk_procs}
set index_do_log = ${index_wrk_do_log}
set index_queue_name = ${queue_name}
set index_worker_chunk_size = ${chunk_size}
set redis_ip = ${redis_ip}
set redis_port = ${redis_port}

[composite:visindexer]
use = egg:encoded#indexer
app = app
path = /index_vis
timeout = 60
set cnf_name = visindexer
set embed_cache.capacity = 5000
set visindexer = true
set index_do_log = false

[composite:regionindexer]
use = egg:encoded#indexer
app = app
path = /index_region
timeout = 60
set cnf_name = regionindexer
set embed_cache.capacity = 5000
set regionindexer = true
set index_do_log = false

[filter:memlimit]
use = egg:encoded#memlimit
rss_limit = 500MB
