#cloud-config
ssh_authorized_keys:
  - %(LOCAL_SSH_KEY)s
package_upgrade: true
power_state:
  mode: reboot
output:
  all: '| tee -a /var/log/cloud-init-output.log'
runcmd:
- sudo -u ubuntu mv /home/ubuntu/.ssh/authorized_keys /home/ubuntu/.ssh/authorized_keys2
- sudo -u ubuntu /usr/bin/aws s3 cp --region=us-west-2 %(S3_AUTH_KEYS)s /home/ubuntu/.ssh/authorized_keys
- cp /etc/redis/redis.conf /etc/redis/redis.conf.default
- sed -i -e 's/port 6379/port %(REDIS_PORT)s/' /etc/redis/redis.conf
- sed -i -e 's/bind 127\.0\.0\.1/bind 0\.0\.0\.0/' /etc/redis/redis.conf
- service redis-server restart
- MEMGIGS=$(awk '/MemTotal/{printf "%%.0f", $2 / 1024**2}' /proc/meminfo)
- if [ "$MEMGIGS" -gt 32 ]
- then
-    echo "-Xms8g" >> /etc/elasticsearch/jvm.options
-    echo "-Xmx8g" >> /etc/elasticsearch/jvm.options
- elif [ "$MEMGIGS" -gt 12 ]
- then
-    echo "-Xms4g" >> /etc/elasticsearch/jvm.options
-    echo "-Xmx4g" >> /etc/elasticsearch/jvm.options
- else
-    echo "-Xms2g" >> /etc/elasticsearch/jvm.options
-    echo "-Xmx2g" >> /etc/elasticsearch/jvm.options
-    sysctl "vm.swappiness=1"
-    swapon /swapfile
- fi
- set -ex
- update-rc.d elasticsearch defaults
- service elasticsearch restart
- chown postgres:postgres /etc/postgresql/9.3/main/*.conf
- echo "include 'custom.conf'" >> /etc/postgresql/9.3/main/postgresql.conf
- if test "%(ROLE)s" != "candidate"
- then
-   echo "standby_mode = off" >> /etc/postgresql/9.3/main/recovery.conf
-   echo "include 'demo.conf'" >> /etc/postgresql/9.3/main/postgresql.conf
- fi
- sudo -u postgres createuser encoded
- sudo -u postgres createdb --owner=encoded encoded
- mkdir /srv/encoded
- chown encoded:encoded /srv/encoded
- cd /srv/encoded
- sudo -u encoded git clone --no-checkout %(GIT_REPO)s .
- sudo -u encoded git checkout %(COMMIT)s
- mkdir /opt/cloudwatchmon
- chown build:build /opt/cloudwatchmon
- sudo -u build virtualenv --python=python2.7 /opt/cloudwatchmon
- sudo -u build /opt/cloudwatchmon/bin/pip install -r cloudwatchmon-requirements.txt

- chown postgres:postgres /etc/postgresql/11/main/*.conf
- echo "include 'custom.conf'" >> /etc/postgresql/11/main/postgresql.conf
- if test "%(ROLE)s" != "candidate"
- then
-   echo "standby_mode = off" >> /etc/postgresql/11/main/recovery.conf
-   echo "include 'demo.conf'" >> /etc/postgresql/11/main/postgresql.conf
- fi
- sudo -u postgres createuser encoded
- sudo -u postgres createdb --owner=encoded encoded
# Wal-E - Install
- sudo -u postgres /usr/bin/pg_ctlcluster 11 main stop
- mkdir /opt/pg-wal-e
- chown -R postgres:postgres /opt/pg-wal-e
- mkdir -p /etc/wal-e.d/env
- chown -R postgres:postgres /etc/wal-e.d
- sudo -u postgres /usr/bin/aws s3 cp --region=us-west-2 --recursive s3://encoded-conf-prod/.aws /var/lib/postgresql/.aws
- sudo -u postgres cp /var/lib/postgresql/.aws/credentials_key /etc/wal-e.d/env/AWS_ACCESS_KEY_ID
- sudo -u postgres cp /var/lib/postgresql/.aws/credentials_secret /etc/wal-e.d/env/AWS_SECRET_ACCESS_KEY
- sudo -u postgres cp /etc/postgresql/11/main/wale_s3_prefix /etc/wal-e.d/env/WALE_S3_PREFIX
- sudo -u postgres echo "us-west-2" >> /etc/wal-e.d/env/AWS_REGION
- sudo -u postgres python3 -m venv /opt/pg-wal-e/.py343-wal-e
- sudo apt-get remove awscli
- sudo -u postgres /opt/pg-wal-e/.py343-wal-e/bin/pip install pip setuptools boto awscli --upgrade
- sudo -u postgres git clone %(GIT_REPO)s /opt/pg-wal-e/pg-encoded
- sudo -u postgres cd /opt/pg-wal-e/pg-encoded && git checkout -b %(GIT_BRANCH)s origin/%(GIT_BRANCH)s
- sudo -u postgres /opt/pg-wal-e/.py343-wal-e/bin/pip install -r /opt/pg-wal-e/pg-encoded/wal-e-requirements.txt
- sudo -u postgres git clone https://github.com/wal-e/wal-e.git /opt/pg-wal-e/wal-e
- sudo -u postgres /opt/pg-wal-e/.py343-wal-e/bin/pip install -e /opt/pg-wal-e/wal-e
- sudo -u postgres envdir /etc/wal-e.d/env /opt/pg-wal-e/.py343-wal-e/bin/wal-e backup-fetch /var/lib/postgresql/11/main LATEST
- sudo -u postgres ln -s /etc/postgresql/11/main/recovery.conf /var/lib/postgresql/11/main/
- sudo -u postgres /usr/bin/pg_ctlcluster 11 main start

- sudo pip3 install -U zc.buildout setuptools redis
- sudo -u encoded buildout bootstrap
- sudo -u encoded LANG=en_US.UTF-8 bin/buildout -c %(ROLE)s.cfg buildout:es-ip=%(ES_IP)s buildout:es-port=%(ES_PORT)s
- sudo -u encoded bin/aws s3 cp --recursive s3://encoded-conf-prod/.aws .aws
- until sudo -u postgres psql postgres -c ""; do sleep 10; done
- sudo -u encoded sh -c 'cat /dev/urandom | head -c 256 | base64 > session-secret.b64'
- sudo -u encoded bin/create-mapping production.ini --app-name app
- sudo -u encoded bin/index-annotations production.ini --app-name app
- if test "%(REGION_INDEX)s" = "False"
- then
-    sudo -u encoded cp /srv/encoded/etc/encoded-apache.conf /srv/encoded/etc/encoded-apache.conf.original
-    sudo -u encoded sh -c "grep -v encoded\-regionindexer /srv/encoded/etc/encoded-apache.conf.original | grep -v _region > /srv/encoded/etc/encoded-apache.conf"
-    sudo -u encoded cp /srv/encoded/base.ini /srv/encoded/base.ini.original
-    sudo -u encoded sh -c "sed 's/vis_indexer, region_indexer/vis_indexer/' /srv/encoded/base.ini.original > /srv/encoded/base.ini"
- fi
- ln -s /srv/encoded/etc/encoded-apache.conf /etc/apache2/sites-available/encoded.conf
- ln -s /srv/encoded/etc/logging-apache.conf /etc/apache2/conf-available/logging.conf
- a2enmod headers
- a2enmod proxy_http
- a2enmod rewrite
- a2enmod ssl
- a2ensite encoded.conf
- a2dissite 000-default
- a2enconf logging
- a2disconf charset
- a2disconf security
- a2disconf localized-error-pages
- a2disconf other-vhosts-access-log
- a2disconf serve-cgi-bin
- if test "%(ROLE)s" = "demo"
- then
-   sudo -i -u encoded bin/batchupgrade production.ini --app-name app
- fi
- sudo sed -i -e 's/inet_interfaces = all/inet_interfaces = loopback-only/g' /etc/postfix/main.cf
- PUBLIC_DNS_NAME="$(curl http://169.254.169.254/latest/meta-data/public-hostname)"
- sudo sed -i "/myhostname/c\myhostname = $PUBLIC_DNS_NAME" /etc/postfix/main.cf
- sudo echo "127.0.0.0 $PUBLIC_DNS_NAME" | sudo tee --append /etc/hosts
- sudo mv /etc/mailname /etc/mailname.OLD
- sudo echo "$PUBLIC_DNS_NAME" | sudo tee --append /etc/mailname
- sudo service postfix restart
users:
- default
- name: build
  gecos: Build user
  inactive: true
  system: true
- name: encoded
  gecos: ENCODE Metadata Database daemon user
  inactive: true
  system: true
  homedir: /srv/encoded
write_files:
- path: /etc/apt/apt.conf.d/20auto-upgrades
  content: |
    APT::Periodic::Update-Package-Lists "1";
    APT::Periodic::Unattended-Upgrade "1";
- path: /etc/apt/apt.conf.d/50unattended-upgrades
  content: |
    Unattended-Upgrade::Allowed-Origins {
        "${distro_id} ${distro_codename}-security";
    };
    Unattended-Upgrade::Mail "encode-devops@lists.stanford.edu";
    Unattended-Upgrade::Automatic-Reboot "false";
- path: /etc/cron.d/cloudwatchmon
  content: |
    */5 * * * * nobody /opt/cloudwatchmon/bin/mon-put-instance-stats.py --mem-util --swap-util --disk-space-util --disk-path=/ --from-cron
- path: /etc/elasticsearch/elasticsearch.yml
  content: |
    http.port: 9201
    thread_pool:
        search:
            size: 100
            queue_size: 2000
        index:
            queue_size: 400
    indices.query.bool.max_clause_count: 8192
- path: /etc/elasticsearch/jvm.options
  content: |
    -XX:+UseConcMarkSweepGC
    -XX:CMSInitiatingOccupancyFraction=75
    -XX:+UseCMSInitiatingOccupancyOnly
    -XX:+DisableExplicitGC
    -XX:+AlwaysPreTouch
    -server
    -Xss1m
    -Djava.awt.headless=true
    -Dfile.encoding=UTF-8
    -Djna.nosys=true
    -Djdk.io.permissionsUseCanonicalPath=true
    -Dio.netty.noUnsafe=true
    -Dio.netty.noKeySetOptimization=true
    -Dio.netty.recycler.maxCapacityPerThread=0
    -Dlog4j.shutdownHookEnabled=false
    -Dlog4j2.disable.jmx=true
    -Dlog4j.skipJansi=true
    -XX:+HeapDumpOnOutOfMemoryError
- path: /etc/postgresql/11/main/custom.conf
  content: |
    hot_standby = on
    max_standby_archive_delay = -1
    wal_level = hot_standby
    archive_mode = on
    archive_timeout = 60
    checkpoint_timeout = 1h
- path: /etc/postgresql/11/main/demo.conf
  content: |
    archive_mode = off
- path: - path: /etc/postgresql/11/main/master.conf
  content: |
    aarchive_command = '/opt/wal-e/bin/envfile --config ~postgres/.aws/credentials --section default --upper -- /opt/pg-wal-e/.py343-wal-e/bin/wal-e --s3-prefix="$(cat /etc/postgresql/11/main/wale_s3_prefix)" wal-push "%%p"'
- path: /etc/postgresql/11/main/recovery.conf
  content: |
    recovery_target_timeline = 'latest'
    restore_command = restore_command = 'envdir /etc/wal-e.d/env /opt/pg-wal-e/.py343-wal-e/bin/wal-e wal-fetch "%%f" "%%p"'
    standby_mode = on
- path: /etc/postgresql/11/main/wale_s3_prefix
  content: "%(WALE_S3_PREFIX)s"
